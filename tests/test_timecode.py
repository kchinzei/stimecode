#!-*- coding: utf-8 -*-
import pytest

from timecode import Timecode, TimecodeError
from stimecode import STimecode


@pytest.mark.parametrize(
    "args,kwargs", [
        [["25"], {"start_timecode": None, "frame_number": -12000}],
        [["23.976", "-00:00:00:00"], {}],
        [["23.98", "-00:00:00:00"], {}],
        [["24", "-00:00:00:00"], {}],
        [["25", "-00:00:00:00"], {}],
        [["29.97", "-00:00:00;00"], {}],
        [["30", "-00:00:00:00"], {}],
        [["50", "-00:00:00:00"], {}],
        [["59.94", "-00:00:00;00"], {}],
        [["60", "-00:00:00:00"], {}],
        [["ms", "-03:36:09.230"], {}],
        [["25"], {"start_timecode": None, "frame_number": -12000}],
        [["23.976"], {}],
        [["23.98"], {}],
        [["24"], {}],
        [["25"], {}],
        [["29.97"], {}],
        [["30"], {}],
        [["50"], {}],
        [["59.94"], {}],
        [["60"], {}],
        [["ms"], {}],
        [["23.976", -421729315], {}],
        [["23.98", -421729315], {}],
        [["24", -421729315], {}],
        [["25", -421729315], {}],
        [["29.97", -421729315], {}],
        [["30", -421729315], {}],
        [["50", -421729315], {}],
        [["59.94", -421729315], {}],
        [["60", -421729315], {}],
        [["ms", -421729315], {}],
        [["24000/1000", "-00:00:00:00"], {}],
        [["24000/1001", "-00:00:00;00"], {}],
        [["30000/1000", "-00:00:00:00"], {}],
        [["30000/1001", "-00:00:00;00"], {}],
        [["60000/1000", "-00:00:00:00"], {}],
        [["60000/1001", "-00:00:00;00"], {}],
        [[(24000, 1000), "-00:00:00:00"], {}],
        [[(24000, 1001), "-00:00:00;00"], {}],
        [[(30000, 1000), "-00:00:00:00"], {}],
        [[(30000, 1001), "-00:00:00;00"], {}],
        [[(60000, 1000), "-00:00:00:00"], {}],
        [[(60000, 1001), "-00:00:00;00"], {}],
        [[24], {"frame_number": -12000}],
        [[23.976, "-00:00:00:00"], {}],
        [[23.98, "-00:00:00:00"], {}],
        [[24, "-00:00:00:00"], {}],
        [[25, "-00:00:00:00"], {}],
        [[29.97, "-00:00:00;00"], {}],
        [[30, "-00:00:00:00"], {}],
        [[50, "-00:00:00:00"], {}],
        [[59.94, "-00:00:00;00"], {}],
        [[60, "-00:00:00:00"], {}],
        [[1000, "-03:36:09.230"], {}],
        [[24], {"start_timecode": None, "frame_number": -12000}],
        [[23.976], {}],
        [[23.98], {}],
        [[24], {}],
        [[25], {}],
        [[29.97], {}],
        [[30], {}],
        [[50], {}],
        [[60], {}],
        [[1000], {}],
        [[24], {"frame_number": -12000}],
        [["frames"], {"frame_number": -100}],
    ]
)
def test_instance_creation(args, kwargs):
    """Instance creation, none of these should raise any error."""
    tc = STimecode(*args, **kwargs)
    assert isinstance(tc, STimecode)


def test_should_fail_instance_creation():
    """Should fail"""
    with pytest.raises(ValueError) as cm:
        val = "not suitable"
        tc1 = STimecode(24, val)
    assert "invalid literal for int() with base 10: '{}'".format(val) == str(cm.value)

    with pytest.raises(TimecodeError) as cm:
        val = 3.14
        tc1 = STimecode(24, val)
    assert "Type {} not supported as timecode.".format(val.__class__.__name__) == str(cm.value)

    with pytest.raises(TypeError) as cm:
        val = 3.14
        tc1 = STimecode(24, frame_number=val)
    assert "STimecode.frame_number should be an integer, not a {}".format(val.__class__.__name__) == str(cm.value)
    
        
def test_2398_vs_23976():
    """Test 23.98 vs 23.976 fps."""
    tc1 = STimecode("23.98", "-04:01:45:23")
    tc2 = STimecode("23.976", "-04:01:45:23")
    assert tc1._frame_number == tc2._frame_number
    assert repr(tc1) == repr(tc2)


def test_frames_setter():
    tc1 = STimecode(29.97)

    tc1.frames = 101
    assert "00:00:03:10" == tc1

    with pytest.raises(TypeError) as cm:
        val = "not suitable"
        tc1.frames = val
    assert "STimecode.frames should be an integer greater than 0, not a {}".format(val.__class__.__name__)== str(cm.value)

    with pytest.raises(TypeError) as cm:
        val = 101.0
        tc1.frames = 101.0
    assert "STimecode.frames should be an integer greater than 0, not a {}".format(val.__class__.__name__)== str(cm.value)

    with pytest.raises(TimecodeError) as cm:
        val = -101
        tc1.frames = val
    assert "STimecode.frames should be an integer greater than 0, but is {}".format(val) == str(cm.value)
    

@pytest.mark.parametrize(
    "args,kwargs,expected_result,operator", [
        [["24", "01:00:00:00"], {}, "01:00:00:00", True],
        [["23.98", "20:00:00:00"], {}, "20:00:00:00", True],
        [["29.97", "00:09:00;00"], {}, "00:08:59;28", True],
        [["29.97", "00:09:00:00"], {"force_non_drop_frame": True}, "00:09:00:00", True],
        [["30", "00:10:00:00"], {}, "00:10:00:00", True],
        [["60", "00:00:09:00"], {}, "00:00:09:00", True],
        [["59.94", "00:00:20;00"], {}, "00:00:20;00", True],
        [["59.94", "00:00:20;00"], {}, "00:00:20:00", False],
        [["ms", "00:00:00.900"], {}, "00:00:00.900", True],
        [["ms", "00:00:00.900"], {}, "00:00:00:900", False],
        [["24"], {"frame_number": 48}, "00:00:02:00", True],
        [["59.94", "00:09:00:00"], {"force_non_drop_frame": True}, "00:09:00:00", True],
        [["59.94", "04:20:13;21"], {}, "04:20:13;21", True],
        [["59.94"], {"frame_number": 935865}, "04:20:13;21", True],

        [["24", "-01:00:00:00"], {}, "-01:00:00:00", True],
        [["23.98", "-20:00:00:00"], {}, "-20:00:00:00", True],
        [["29.97", "-00:09:00;00"], {}, "-00:08:59;28", True],
        [["29.97", "-00:09:00:00"], {"force_non_drop_frame": True}, "-00:09:00:00", True],
        [["30", "-00:10:00:00"], {}, "-00:10:00:00", True],
        [["60", "-00:00:09:00"], {}, "-00:00:09:00", True],
        [["59.94", "-00:00:20;00"], {}, "-00:00:20;00", True],
        [["59.94", "-00:00:20;00"], {}, "-00:00:20:00", False],
        [["ms", "-00:00:00.900"], {}, "-00:00:00.900", True],
        [["ms", "-00:00:00.900"], {}, "-00:00:00:900", False],
        [["24"], {"frame_number": -48}, "-00:00:02:00", True],
        [["59.94", "-00:09:00:00"], {"force_non_drop_frame": True}, "-00:09:00:00", True],
        [["59.94", "-04:20:13;21"], {}, "-04:20:13;21", True],
        [["59.94"], {"frame_number": -935865}, "-04:20:13;21", True],
        [["frames", "-00:01:40:00"], {}, "-00:01:40:00", True],
        [["frames"], {"frame_number": -100}, "-00:01:40:00", True],
    ]
)
def test_repr_overload(args, kwargs, expected_result, operator):
    """Several timecode initialization."""
    tc = STimecode(*args, **kwargs)
    if operator:
        assert expected_result == tc.__repr__()
    else:
        assert expected_result != tc.__repr__()


def test_repr_overload_2():
    """Several timecode initialization."""
    tc1 = STimecode("59.94", frame_number=-9*60*60, force_non_drop_frame=True)
    tc2 = STimecode("59.94", "-00:09:00:00", force_non_drop_frame=True)
    assert tc1 == tc2


@pytest.mark.parametrize(
    "args,kwargs,expected_repr,expected_frames,is_drop_frame", [
        [["29.97", "00:00:00;01"], {"force_non_drop_frame": True}, None, 2, None],
        [["29.97", "00:00:00:01"], {"force_non_drop_frame": True}, None, 2, None],
        [["29.97", "03:36:09;23"], {"force_non_drop_frame": False}, None, 388704, None],
        [["29.97", "03:36:09:23"], {"force_non_drop_frame": True}, None, 389094, None],
        [["29.97", "03:36:09;23"], {}, None, 388704, None],
        [["30", "03:36:09:23"], {}, None, 389094, None],
        [["25", "03:36:09:23"], {}, None, 324249, None],
        [["59.94", "03:36:09;23"], {}, None, 777384, None],
        [["60", "03:36:09:23"], {}, None, 778164, None],
        [["59.94", "03:36:09;23"], {}, None, 777384, None],
        [["23.98", "03:36:09:23"], {}, None, 311280, None],
        [["24", "03:36:09:23"], {}, None, 311280, None],
        [["24"], {"frame_number": 12000}, "00:08:20:00", None, None],
        [["25", 421729315], {}, "19:23:14:23", None, None],
        [["29.97", 421729315], {}, "19:23:14;23", None, True],
        [["23.98"], {"frame_number": 311280 * 720}, "02:00:00:00", None, None],
        [["23.98"], {"frame_number": 172800}, "02:00:00:00", None, None],

        [["29.97", "-00:00:00;01"], {"force_non_drop_frame": True}, None, 2, None],
        [["29.97", "-00:00:00:01"], {"force_non_drop_frame": True}, None, 2, None],
        [["29.97", "-03:36:09;23"], {"force_non_drop_frame": False}, None, 388704, None],
        [["29.97", "-03:36:09:23"], {"force_non_drop_frame": True}, None, 389094, None],
        [["29.97", "-03:36:09;23"], {}, None, 388704, None],
        [["30", "-03:36:09:23"], {}, None, 389094, None],
        [["25", "-03:36:09:23"], {}, None, 324249, None],
        [["59.94", "-03:36:09;23"], {}, None, 777384, None],
        [["60", "-03:36:09:23"], {}, None, 778164, None],
        [["59.94", "-03:36:09;23"], {}, None, 777384, None],
        [["23.98", "-03:36:09:23"], {}, None, 311280, None],
        [["24", "-03:36:09:23"], {}, None, 311280, None],
        [["24"], {"frame_number": -12000}, "-00:08:20:00", None, None],
        [["25", -421729315], {}, "-19:23:14:23", None, None],
        [["29.97", -421729315], {}, "-19:23:14;23", None, True],
        [["23.98"], {"frame_number": -311280 * 720}, "-02:00:00:00", None, None],
        [["23.98"], {"frame_number": -172800}, "-02:00:00:00", None, None],
    ]
)
def test_timecode_str_repr_tests(args, kwargs, expected_repr, expected_frames, is_drop_frame):
    """Several timecode initialization."""
    tc = STimecode(*args, **kwargs)
    if expected_repr is not None:
        assert expected_repr == tc.__str__()
    if expected_frames is not None:
        assert expected_frames == tc.frames
    if is_drop_frame is not None:
        if is_drop_frame is True:
            assert tc.drop_frame is True
        else:
            assert tc.drop_frame is False


@pytest.mark.parametrize(
    "args,kwargs,hrs,mins,secs,frs,sign,str_repr", [
        [["ms", "03:36:09.230"], {}, 3, 36, 9, 230, 1, None],
        [["29.97", "00:00:00;01"], {}, 0, 0, 0, 1, 1, "00:00:00;01"],
        [["29.97", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["29.97", "03:36:09;23"], {}, 3, 36, 9, 23, 1, None],
        [["30", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["25", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["59.94", "03:36:09;23"], {}, 3, 36, 9, 23, 1, None],
        [["60", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["59.94", "03:36:09;23"], {}, 3, 36, 9, 23, 1, None],
        [["23.98", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["24", "03:36:09:23"], {}, 3, 36, 9, 23, 1, None],
        [["ms", "03:36:09.230"], {}, 3, 36, 9, 230, 1, None],
        [["24"], {"frame_number": 12000}, 0, 8, 20, 00, 1, "00:08:20:00"],

        [["ms", "-03:36:09.230"], {}, 3, 36, 9, 230, -1, None],
        [["29.97", "-00:00:00;01"], {}, 0, 0, 0, 1, -1, "-00:00:00;01"],
        [["29.97", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["29.97", "-03:36:09;23"], {}, 3, 36, 9, 23, -1, None],
        [["30", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["25", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["59.94", "-03:36:09;23"], {}, 3, 36, 9, 23, -1, None],
        [["60", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["59.94", "-03:36:09;23"], {}, 3, 36, 9, 23, -1, None],
        [["23.98", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["24", "-03:36:09:23"], {}, 3, 36, 9, 23, -1, None],
        [["ms", "-03:36:09.230"], {}, 3, 36, 9, 230, -1, None],
        [["24"], {"frame_number": -12000}, 0, 8, 20, 00, -1, "-00:08:20:00"],
    ]
)
def test_timecode_properties_test(args, kwargs, hrs, mins, secs, frs, sign, str_repr):
    """Test hrs, mins, secs and frs properties."""
    tc = STimecode(*args, **kwargs)
    assert hrs == tc.hrs
    assert mins == tc.mins
    assert secs == tc.secs
    assert frs == tc.frs
    assert sign == tc.sign
    if str_repr is not None:
        assert str_repr == tc.__str__()


@pytest.mark.parametrize(
    "args,kwargs,frames, str_repr, tc_incr", [
        [["29.97", "00:00:00;00"], {}, 1, None, None],
        [["29.97", "00:00:00;21"], {}, 22, None, None],
        [["29.97", "00:00:00;29"], {}, 30, None, None],
        [["29.97", "00:00:00;60"], {}, 61, None, None],
        [["29.97", "00:00:01;00"], {}, 31, None, None],
        [["29.97", "00:00:10;00"], {}, 301, None, None],
        [["29.97", "00:01:00;00"], {}, 1799, "00:00:59;28", None],
        [["29.97", "23:59:59;29"], {}, 2589408, None, None],
        [["29.97", "01:00:00;00"], {"force_non_drop_frame": True}, None, "01:00:00:00", None],
        [["29.97", "01:00:00:00"], {"force_non_drop_frame": True}, None, "01:00:00:00", None],
        [["29.97", "13:36:59;29"], {}, None, None, "13:37:00;02"],
        [["59.94", "13:36:59;59"], {}, None, "13:36:59;59", None],
        [["59.94", "13:36:59;59"], {}, None, None, "13:37:00;04"],
        [["59.94", "13:39:59;59"], {}, None, None, "13:40:00;00"],
        [["29.97", "13:39:59;29"], {}, None, None, "13:40:00;00"],

        [["29.97", "-00:00:00;00"], {}, 1, None, None],
        [["29.97", "-00:00:00;21"], {}, 22, None, None],
        [["29.97", "-00:00:00;29"], {}, 30, None, None],
        [["29.97", "-00:00:00;60"], {}, 61, None, None],
        [["29.97", "-00:00:01;00"], {}, 31, None, None],
        [["29.97", "-00:00:10;00"], {}, 301, None, None],
        [["29.97", "-00:01:00;00"], {}, 1799, "-00:00:59;28", None],
        [["29.97", "-23:59:59;29"], {}, 2589408, None, None],
        [["29.97", "-01:00:00;00"], {"force_non_drop_frame": True}, None, "-01:00:00:00", None],
        [["29.97", "-01:00:00:00"], {"force_non_drop_frame": True}, None, "-01:00:00:00", None],
        [["29.97", "-13:36:59;29"], {}, None, None, "-13:37:00;02"],
        [["59.94", "-13:36:59;59"], {}, None, "-13:36:59;59", None],
        [["59.94", "-13:36:59;59"], {}, None, None, "-13:37:00;04"],
        [["59.94", "-13:39:59;59"], {}, None, None, "-13:40:00;00"],
        [["29.97", "-13:39:59;29"], {}, None, None, "-13:40:00;00"],
    ]
)
def test_tc_to_frame_test_in_2997(args, kwargs, frames, str_repr, tc_incr):
    """timecode to frame conversion is ok in 2997."""
    tc = STimecode(*args, **kwargs)
    if frames is not None:
        assert frames == tc.frames
    if str_repr is not None:
        assert str_repr == tc.__str__()
    if tc_incr is not None:
        if tc.sign > 0:
            assert tc_incr == tc.next().__str__() #!
        else:
            assert tc_incr == tc.back().__str__() #!


def test_setting_frame_rate_to_2997_forces_drop_frame():
    """Setting the frame rate to 29.97 forces the dropframe to True."""
    tc = STimecode("29.97")
    assert tc.drop_frame


def test_setting_frame_rate_to_5994_forces_drop_frame():
    """Setting the frame rate to 59.94 forces the dropframe to True."""
    tc = STimecode("59.94")
    assert tc.drop_frame


def test_setting_frame_rate_to_ms_forces_drop_frame():
    """Setting the frame rate to ms forces the ms_frame to True."""
    tc = STimecode("ms")
    assert tc.ms_frame


def test_setting_frame_rate_to_1000_forces_drop_frame():
    """Setting the frame rate to 1000 forces the ms_frame to True."""
    tc = STimecode("1000")
    assert tc.ms_frame


def test_framerate_argument_is_frame_number():
    """Setting the framerate arg to 'frame_number' will set the integer frame rate to 1."""
    tc = STimecode("frames")
    assert tc.framerate == "frames"
    assert tc._int_framerate == 1


@pytest.mark.parametrize(
    "args,kwargs,str_repr,incr_range,last_tc_str_repr,frame_number", [
        [["29.97", "03:36:09;23"], {}, "03:36:09;23", 60, "03:36:11;23", 388763],
        [["30",    "03:36:09:23"], {}, "03:36:09;23", 60, "03:36:11:23", 389153],
        [["25",    "03:36:09:23"], {}, "03:36:09;23", 60, "03:36:12:08", 324308],
        [["59.94", "03:36:09;23"], {}, "03:36:09;23", 60, "03:36:10;23", 777443],
        [["60",    "03:36:09:23"], {}, "03:36:09:23", 60, "03:36:10:23", 778223],
        [["59.94", "03:36:09:23"], {}, "03:36:09;23", 60, "03:36:10:23", 777443],
        [["23.98", "03:36:09:23"], {}, "03:36:09:23", 60, "03:36:12:11", 311339],
        [["24",    "03:36:09:23"], {}, "03:36:09:23", 60, "03:36:12:11", 311339],
        [["ms",    "03:36:09.230"],{}, "03:36:09.230",60, "03:36:09.290",12969290],
        [["24"],    {"frame_number": 12000}, "00:08:20:00", 60, "00:08:22:12", 12060],

        [["29.97", "-03:36:09;23"], {}, "-03:36:09;23", 60, "-03:36:11;23", -388763],
        [["30",    "-03:36:09:23"], {}, "-03:36:09;23", 60, "-03:36:11:23", -389153],
        [["25",    "-03:36:09:23"], {}, "-03:36:09;23", 60, "-03:36:12:08", -324308],
        [["59.94", "-03:36:09;23"], {}, "-03:36:09;23", 60, "-03:36:10;23", -777443],
        [["60",    "-03:36:09:23"], {}, "-03:36:09:23", 60, "-03:36:10:23", -778223],
        [["59.94", "-03:36:09:23"], {}, "-03:36:09;23", 60, "-03:36:10:23", -777443],
        [["23.98", "-03:36:09:23"], {}, "-03:36:09:23", 60, "-03:36:12:11", -311339],
        [["24",    "-03:36:09:23"], {}, "-03:36:09:23", 60, "-03:36:12:11", -311339],
        [["ms",    "-03:36:09.230"],{}, "-03:36:09.230",60, "-03:36:09.290",-12969290],
        [["24"],    {"frame_number": -12000}, "-00:08:20:00", 60, "-00:08:22:12", -12060],
    ]
)
def test_iteration(args, kwargs, str_repr, incr_range, last_tc_str_repr, frame_number):
    """Test iteration."""
    tc = STimecode(*args, **kwargs)
    assert tc == str_repr

    last_tc = None
    for x in range(incr_range):
        if tc.sign > 0:
            last_tc = tc.next()
        else:
            last_tc = tc.back()
        assert last_tc is not None

    assert last_tc_str_repr == last_tc
    assert frame_number == tc._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "03:36:09;23"], {}, ["29.97", "00:00:29;23"],  {},     893,  893, "03:36:39;16", "03:36:39;16",    389596,   389596],
        [["30", "03:36:09:23"],    {}, ["30",    "00:00:29:23"],  {},     893,  893, "03:36:39:16", "03:36:39:16",    389986,   389986],
        [["25", "03:36:09:23"],    {}, ["25",    "00:00:29:23"],  {},     748,  748, "03:36:39:21", "03:36:39:21",    324996,   324996],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "03:36:38;46", "03:36:38;46",    779146,   779146],
        [["60", "03:36:09:23"],    {}, ["60",    "00:00:29:23"],  {},    1763, 1763, "03:36:38:46", "03:36:38:46",    779926,   779926],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "03:36:38;46", "03:36:38;46",    779146,   779146],
        [["23.98", "03:36:09:23"], {}, ["23.98", "00:00:29:23"],  {},     719,  719, "03:36:39:22", "03:36:39:22",    311998,   311998],
        [["ms", "03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "04:42:18.460","03:36:09.949", 16938460, 12969949],
        [["ms", "03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "04:42:18.460","03:36:09.949", 16938460, 12969949],
        [["24"], {"frame_number": 12000}, ["24"], {"frame_number": 485},  485,  719, "00:08:40:05", "00:08:49:23",     12485,    12719],
        [["59.94", "04:20:13;21"], {}, ["59.94", "23:59:59;59"], {},  5178815,     0, "04:20:13;20", "04:20:13;21",   6114680,   935865],

        [["29.97", "-03:36:09;23"], {}, ["29.97", "-00:00:29;23"],  {},     -893,  -893, "-03:36:39;16", "-03:36:39;16",    -389596,   -389596],
        [["30", "-03:36:09:23"],    {}, ["30",    "-00:00:29:23"],  {},     -893,  -893, "-03:36:39:16", "-03:36:39:16",    -389986,   -389986],
        [["25", "-03:36:09:23"],    {}, ["25",    "-00:00:29:23"],  {},     -748,  -748, "-03:36:39:21", "-03:36:39:21",    -324996,   -324996],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "-00:00:29;23"],  {},    -1763, -1763, "-03:36:38;46", "-03:36:38;46",    -779146,   -779146],
        [["60", "-03:36:09:23"],    {}, ["60",    "-00:00:29:23"],  {},    -1763, -1763, "-03:36:38:46", "-03:36:38:46",    -779926,   -779926],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "-00:00:29;23"],  {},    -1763, -1763, "-03:36:38;46", "-03:36:38;46",    -779146,   -779146],
        [["23.98", "-03:36:09:23"], {}, ["23.98", "-00:00:29:23"],  {},     -719,  -719, "-03:36:39:22", "-03:36:39:22",    -311998,   -311998],
        [["ms", "-03:36:09.230"],   {}, ["ms",    "-01:06:09.230"], {}, -3969230,  -719, "-04:42:18.460","-03:36:09.949", -16938460, -12969949],
        [["ms", "-03:36:09.230"],   {}, ["ms",    "-01:06:09.230"], {}, -3969230,  -719, "-04:42:18.460","-03:36:09.949", -16938460, -12969949],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": -485},  -485,  -719, "-00:08:40:05", "-00:08:49:23",     -12485,    -12719],
        [["59.94", "-04:20:13;21"], {}, ["59.94", "-23:59:59;59"], {},  -5178815,     0, "-04:20:13;20", "-04:20:13;21",   -6114680,   -935865],
    ]
)
def test_op_overloads_add(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test + operator overload."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = STimecode(*args2, **kwargs2)
    assert custom_offset1 == tc2._frame_number
    d = tc + tc2
    f = tc + custom_offset2
    assert str_repr2 == f.__str__()
    assert frame_number2 == f._frame_number
    assert str_repr1 == d.__str__()
    assert frame_number1 == d._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "03:36:09;23"], {}, ["29.97", "00:00:29;23"],  {},     893,  893, "03:36:39;16", "03:36:39;16",    389596,   389596],
        [["30", "03:36:09:23"],    {}, ["30",    "00:00:29:23"],  {},     893,  893, "03:36:39:16", "03:36:39:16",    389986,   389986],
        [["25", "03:36:09:23"],    {}, ["25",    "00:00:29:23"],  {},     748,  748, "03:36:39:21", "03:36:39:21",    324996,   324996],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "03:36:38;46", "03:36:38;46",    779146,   779146],
        [["60", "03:36:09:23"],    {}, ["60",    "00:00:29:23"],  {},    1763, 1763, "03:36:38:46", "03:36:38:46",    779926,   779926],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "03:36:38;46", "03:36:38;46",    779146,   779146],
        [["23.98", "03:36:09:23"], {}, ["23.98", "00:00:29:23"],  {},     719,  719, "03:36:39:22", "03:36:39:22",    311998,   311998],
        [["ms", "03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "04:42:18.460","03:36:09.949", 16938460, 12969949],
        [["ms", "03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "04:42:18.460","03:36:09.949", 16938460, 12969949],
        [["24"], {"frame_number": 12000}, ["24"], {"frames": 486},        485,  719, "00:08:40:05", "00:08:49:23",     12485,    12719],
        [["59.94", "04:20:13;21"], {}, ["59.94", "23:59:59;59"], {},  5178815,    0, "04:20:13;20", "04:20:13;21",   6114680,   935865],

        [["29.97", "-03:36:09;23"], {}, ["29.97", "00:00:29;23"], {},     893,     893, "-03:35:39;28", "-03:35:39;28", -387810, -387810],
        [["30",    "-03:36:09:23"], {}, ["30",    "00:00:29:23"], {},     893,     893, "-03:35:40:00", "-03:35:40:00", -388200, -388200],
        [["25",    "-03:36:09:23"], {}, ["25",    "00:00:29:23"], {},     748,     748, "-03:35:40:00", "-03:35:40:00", -323500, -323500],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,    1763, "-03:35:39;56", "-03:35:39;56", -775620, -775620],
        [["60",    "-03:36:09:23"], {}, ["60",    "00:00:29:23"], {},    1763,    1763, "-03:35:40:00", "-03:35:40:00", -776400, -776400],
        [["23.98", "-03:36:09:23"], {}, ["23.98", "00:00:29:23"], {},     719,     719, "-03:35:40:00", "-03:35:40:00", -310560, -310560],
        [["ms",    "-03:36:09.230"],{}, ["ms",    "01:06:09.230"],{}, 3969230, 3969230, "-02:30:00.000","-02:30:00.000", -9000000, -9000000],
        [["24"], {"frame_number": -12000}, ["24"], {"frames": 486},       485,     485, "-00:07:59:19", "-00:07:59:19", -11515, -11515],
    ]
)
def test_op_overloads_add_Timecode(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test + operator overload with Timecode."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = Timecode(*args2, **kwargs2)
    assert custom_offset1 == tc2.frame_number
    d = tc + tc2
    f = tc + custom_offset2
    assert str_repr2 == f.__str__()
    assert frame_number2 == f._frame_number
    assert str_repr1 == d.__str__()
    assert frame_number1 == d._frame_number

    # Test + rev_operator overload with Timecode.
    g = tc2 + tc
    assert str_repr1 == g.__str__()
    assert frame_number1 == g._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "03:36:09;23"], {}, ["29.97", "00:00:29;23"], {},     893,     893, "03:35:39;28", "03:35:39;28", 387810, 387810],
        [["30",    "03:36:09:23"], {}, ["30",    "00:00:29:23"], {},     893,     893, "03:35:40:00", "03:35:40:00", 388200, 388200],
        [["25",    "03:36:09:23"], {}, ["25",    "00:00:29:23"], {},     748,     748, "03:35:40:00", "03:35:40:00", 323500, 323500],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,    1763, "03:35:39;56", "03:35:39;56", 775620, 775620],
        [["60",    "03:36:09:23"], {}, ["60",    "00:00:29:23"], {},    1763,    1763, "03:35:40:00", "03:35:40:00", 776400, 776400],
        [["23.98", "03:36:09:23"], {}, ["23.98", "00:00:29:23"], {},     719,     719, "03:35:40:00", "03:35:40:00", 310560, 310560],
        [["ms",    "03:36:09.230"],{}, ["ms",    "01:06:09.230"],{}, 3969230, 3969230, "02:30:00.000","02:30:00.000", 9000000, 9000000],
        [["24"], {"frame_number": 12000}, ["24"], {"frame_number": 485}, 485,     485, "00:07:59:19", "00:07:59:19", 11515, 11515],

        [["29.97", "-03:36:09;23"], {}, ["29.97", "-00:00:29;23"], {},     -893,     -893, "-03:35:39;28", "-03:35:39;28", -387810, -387810],
        [["30",    "-03:36:09:23"], {}, ["30",    "-00:00:29:23"], {},     -893,     -893, "-03:35:40:00", "-03:35:40:00", -388200, -388200],
        [["25",    "-03:36:09:23"], {}, ["25",    "-00:00:29:23"], {},     -748,     -748, "-03:35:40:00", "-03:35:40:00", -323500, -323500],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "-00:00:29;23"], {},    -1763,    -1763, "-03:35:39;56", "-03:35:39;56", -775620, -775620],
        [["60",    "-03:36:09:23"], {}, ["60",    "-00:00:29:23"], {},    -1763,    -1763, "-03:35:40:00", "-03:35:40:00", -776400, -776400],
        [["23.98", "-03:36:09:23"], {}, ["23.98", "-00:00:29:23"], {},     -719,     -719, "-03:35:40:00", "-03:35:40:00", -310560, -310560],
        [["ms",    "-03:36:09.230"],{}, ["ms",    "-01:06:09.230"],{}, -3969230, -3969230, "-02:30:00.000","-02:30:00.000", -9000000, -9000000],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": -485}, -485,     -485, "-00:07:59:19", "-00:07:59:19", -11515, -11515],
    ]
)
def test_op_overloads_subtract(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test - operator overload."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = STimecode(*args2, **kwargs2)
    assert custom_offset1 == tc2._frame_number
    d = tc - tc2
    f = tc - custom_offset2
    assert str_repr1 == d.__str__()
    assert str_repr2 == f.__str__()
    assert frame_number1 == d._frame_number
    assert frame_number2 == f._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "03:36:09;23"], {}, ["29.97", "00:00:29;23"], {},  893,   893, "03:35:39;28", "03:35:39;28", 387810, 387810],
        [["30",    "03:36:09:23"], {}, ["30",    "00:00:29:23"], {},  893,   893, "03:35:40:00", "03:35:40:00", 388200, 388200],
        [["25",    "03:36:09:23"], {}, ["25",    "00:00:29:23"], {},  748,   748, "03:35:40:00", "03:35:40:00", 323500, 323500],
        [["59.94", "03:36:09;23"], {}, ["59.94", "00:00:29;23"], {}, 1763,  1763, "03:35:39;56", "03:35:39;56", 775620, 775620],
        [["60",    "03:36:09:23"], {}, ["60",    "00:00:29:23"], {}, 1763,  1763, "03:35:40:00", "03:35:40:00", 776400, 776400],
        [["23.98", "03:36:09:23"], {}, ["23.98", "00:00:29:23"], {},  719,   719, "03:35:40:00", "03:35:40:00", 310560, 310560],
        [["ms",    "03:36:09.230"],{}, ["ms",    "01:06:09.230"],{}, 3969230,  3969230, "02:30:00.000", "02:30:00.000", 9000000, 9000000],
        [["24"], {"frame_number": 12000}, ["24"], {"frames": 486},    485,  485, "00:07:59:19", "00:07:59:19", 11515, 11515],

        [["29.97", "-03:36:09;23"], {}, ["29.97", "00:00:29;23"],  {},     893,  893, "-03:36:39;16", "-03:36:39;16",    -389596,   -389596],
        [["30", "-03:36:09:23"],    {}, ["30",    "00:00:29:23"],  {},     893,  893, "-03:36:39:16", "-03:36:39:16",    -389986,   -389986],
        [["25", "-03:36:09:23"],    {}, ["25",    "00:00:29:23"],  {},     748,  748, "-03:36:39:21", "-03:36:39:21",    -324996,   -324996],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "-03:36:38;46", "-03:36:38;46",    -779146,   -779146],
        [["60", "-03:36:09:23"],    {}, ["60",    "00:00:29:23"],  {},    1763, 1763, "-03:36:38:46", "-03:36:38:46",    -779926,   -779926],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"],  {},    1763, 1763, "-03:36:38;46", "-03:36:38;46",    -779146,   -779146],
        [["23.98", "-03:36:09:23"], {}, ["23.98", "00:00:29:23"],  {},     719,  719, "-03:36:39:22", "-03:36:39:22",    -311998,   -311998],
        [["ms", "-03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "-04:42:18.460","-03:36:09.949", -16938460, -12969949],
        [["ms", "-03:36:09.230"],   {}, ["ms",    "01:06:09.230"], {}, 3969230,  719, "-04:42:18.460","-03:36:09.949", -16938460, -12969949],
        [["24"], {"frame_number": -12000}, ["24"], {"frames": 486},        485,  719, "-00:08:40:05", "-00:08:49:23",     -12485,    -12719],
        [["59.94", "-04:20:13;21"], {}, ["59.94", "23:59:59;59"], {},  5178815,    0, "-04:20:13;20", "-04:20:13;21",   -6114680,   -935865],
    ]
)
def test_op_overloads_subtract_Timecode(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test - operator overload with Timecode."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = Timecode(*args2, **kwargs2)
    assert custom_offset1 == tc2.frame_number
    d = tc - tc2
    f = tc - custom_offset2
    assert str_repr1 == d.__str__()
    assert str_repr2 == f.__str__()
    assert frame_number1 == d._frame_number
    assert frame_number2 == f._frame_number

    # Test - rev_operator overload with Timecode.
    g = tc2 - tc
    assert -frame_number1 == g._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "-00:00:09;23"], {}, ["29.97", "00:00:29;23"], {},     893,        4, "-02:25:30;11", "-00:00:39;02",          -261649,           -1172],
        [["30",    "-03:36:09:23"], {}, ["30",    "00:00:29:23"], {},     893,      894, "-01:13:21:19", "-04:49:31:12",       -347460049,      -347849142],
        [["25",    "-03:36:09:23"], {}, ["25",    "00:00:29:23"], {},     748,      749, "-06:51:40:04", "-10:27:50:02",       -242537504,      -242861752],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,     1764, "-15:22:48;45", "-18:58:58;08",      -1370526229,     -1371303612],
        [["60",    "-03:36:09:23"], {}, ["60",    "00:00:29:23"], {},    1763,     1764, "-15:23:42:49", "-18:59:52:12",      -1371901369,     -1372679532],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,     1764, "-15:22:48;45", "-18:58:58;08",      -1370526229,     -1371303612],
        [["ms",    "-03:36:09.230"],{}, ["ms",    "01:06:09.230"],{}, 3969230,  3969231, "-12:39:52.900","-16:16:02.130", -51477856792900, -51477869762130],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": 485}, 485,      485, "-19:21:40:00", "-19:21:40:00",         -5820000,        -5820000],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": 485}, 485,      485, "-19:21:40:00", "-19:21:40:00",         -5820000,        -5820000],

        [["29.97", "-00:00:09;23"], {}, ["29.97", "-00:00:29;23"], {},     -893,        -4, "02:25:30;11", "00:00:39;02",          261649,           1172],
        [["30",    "-03:36:09:23"], {}, ["30",    "-00:00:29:23"], {},     -893,      -894, "01:13:21:19", "04:49:31:12",       347460049,      347849142],
        [["25",    "-03:36:09:23"], {}, ["25",    "-00:00:29:23"], {},     -748,      -749, "06:51:40:04", "10:27:50:02",       242537504,      242861752],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "-00:00:29;23"], {},    -1763,     -1764, "15:22:48;45", "18:58:58;08",      1370526229,     1371303612],
        [["60",    "-03:36:09:23"], {}, ["60",    "-00:00:29:23"], {},    -1763,     -1764, "15:23:42:49", "18:59:52:12",      1371901369,     1372679532],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "-00:00:29;23"], {},    -1763,     -1764, "15:22:48;45", "18:58:58;08",      1370526229,     1371303612],
        [["ms",    "-03:36:09.230"],{}, ["ms",    "-01:06:09.230"],{}, -3969230,  -3969231, "12:39:52.900","16:16:02.130", 51477856792900, 51477869762130],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": -485}, -485,      -485, "19:21:40:00", "19:21:40:00",         5820000,        5820000],
        [["24"], {"frame_number": -12000}, ["24"], {"frame_number": -485}, -485,      -485, "19:21:40:00", "19:21:40:00",         5820000,        5820000],
    ]
)
def test_op_overloads_mult(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test * operator overload."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = STimecode(*args2, **kwargs2)
    assert custom_offset1 == tc2.frame_number
    d = tc * tc2
    f = tc * custom_offset2
    assert str_repr1 == d.__str__()
    assert str_repr2 == f.__str__()
    assert frame_number1 == d._frame_number
    assert frame_number2 == f._frame_number


@pytest.mark.parametrize(
    "args1,kwargs1,args2,kwargs2,custom_offset1,custom_offset2,str_repr1,str_repr2,frame_number1, frame_number2", [
        [["29.97", "-00:00:09;23"], {}, ["29.97", "00:00:29;23"], {},     893,        4, "-02:25:30;11", "-00:00:39;02",          -261649,           -1172],
        [["30",    "-03:36:09:23"], {}, ["30",    "00:00:29:23"], {},     893,      894, "-01:13:21:19", "-04:49:31:12",       -347460049,      -347849142],
        [["25",    "-03:36:09:23"], {}, ["25",    "00:00:29:23"], {},     748,      749, "-06:51:40:04", "-10:27:50:02",       -242537504,      -242861752],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,     1764, "-15:22:48;45", "-18:58:58;08",      -1370526229,     -1371303612],
        [["60",    "-03:36:09:23"], {}, ["60",    "00:00:29:23"], {},    1763,     1764, "-15:23:42:49", "-18:59:52:12",      -1371901369,     -1372679532],
        [["59.94", "-03:36:09;23"], {}, ["59.94", "00:00:29;23"], {},    1763,     1764, "-15:22:48;45", "-18:58:58;08",      -1370526229,     -1371303612],
        [["ms",    "-03:36:09.230"],{}, ["ms",    "01:06:09.230"],{}, 3969230,  3969231, "-12:39:52.900","-16:16:02.130", -51477856792900, -51477869762130],
        [["24"], {"frame_number": -12000}, ["24"], {"frames": 486},       485,      485, "-19:21:40:00", "-19:21:40:00",         -5820000,        -5820000],
        [["24"], {"frame_number": -12000}, ["24"], {"frames": 486},       485,      485, "-19:21:40:00", "-19:21:40:00",         -5820000,        -5820000],
    ]
)
def test_op_overloads_mult_Timecode(args1, kwargs1, args2, kwargs2, custom_offset1, custom_offset2, str_repr1, str_repr2, frame_number1, frame_number2):
    """Test * operator overload."""
    tc = STimecode(*args1, **kwargs1)
    tc2 = Timecode(*args2, **kwargs2)
    assert custom_offset1 == tc2.frame_number
    d = tc * tc2
    f = tc * custom_offset2
    assert str_repr1 == d.__str__()
    assert str_repr2 == f.__str__()
    assert frame_number1 == d._frame_number
    assert frame_number2 == f._frame_number

    # Test * rev_operator overload.
    g = tc2 * tc
    assert str_repr1 == g.__str__()
    assert frame_number1 == g._frame_number


def test_op_overloads_mult_1():
    """Two STimecode multiplied, the framerate of the result is the same of left side."""
    tc1 = STimecode("23.98", "-03:36:09:23")
    tc2 = STimecode("23.98", "-00:00:29:23")
    tc3 = tc1 * tc2
    assert tc3.framerate == "23.98"
    assert tc3.sign == 1 #+

    tc2 = Timecode("23.98", "00:00:29:23")
    tc3 = tc1 * tc2
    assert tc3.framerate == "23.98"
    assert tc3.sign == -1 #+

    tc3 = tc2 * tc1
    assert tc3.framerate == "23.98"
    assert tc3.sign == -1 #+

def test_op_overloads_mult_2():
    """Two STimecode multiplied, the framerate of the result is the same of left side."""
    tc1 = STimecode("23.98", "-03:36:09:23")
    assert tc1._frame_number == -311279
    tc2 = STimecode("23.98", "-00:00:29:23")
    assert tc2._frame_number  == -719
    tc3 = tc1 * tc2
    assert 223809601 == tc3._frame_number
    assert "22:23:20:01" == tc3.__str__() #?

    tc2 = Timecode("23.98", "00:00:29:23")
    assert tc2.frame_number  == 719

    tc3 = tc1 * tc2
    assert -223809601 == tc3._frame_number
    assert "-22:23:20:01" == tc3.__str__() #?
    
    tc3 = tc2 * tc1
    assert -223809601 == tc3._frame_number
    assert "-22:23:20:01" == tc3.__str__() #?

def test_op_overloads_mult_3():
    """STimecode multiplied with integer."""
    tc1 = STimecode("23.98", "-03:36:09:23")
    tc4 = tc1 * 720
    assert -224120880 == tc4._frame_number
    assert "-01:59:30:00" == tc4.__str__()


def test_add_with_two_different_frame_rates():
    """Added TCs with different framerate, result framerate is same with left side."""
    tc1 = STimecode("29.97", "-00:00:00;00")
    tc2 = STimecode("24", "-00:00:00:10")
    tc3 = tc1 + tc2
    assert "29.97" == tc3.framerate
    assert -10 == tc3._frame_number
    assert tc3 == "-00:00:00;10"

    tc2 = Timecode("24", "00:00:00:10")
    tc3 = tc1 + tc2
    assert "29.97" == tc3.framerate
    assert 10 == tc3._frame_number
    assert tc3 == "00:00:00;10"

    tc3 = tc2 + tc1
    assert "24" == tc3.framerate
    assert 10 == tc3._frame_number
    assert tc3 == "00:00:00;10"
    
def test_subtract_with_two_different_frame_rates():
    """Subtracted TCs with different framerate, result framerate is same with left side."""
    tc1 = STimecode("29.97", "-00:00:00;00")
    tc2 = STimecode("24", "-00:00:00:10")
    tc3 = tc1 - tc2
    assert "29.97" == tc3.framerate
    assert 10 == tc3._frame_number
    assert tc3 == "00:00:00;10"

    tc2 = Timecode("24", "00:00:00:10")
    tc3 = tc1 - tc2
    assert "29.97" == tc3.framerate
    assert -10 == tc3._frame_number
    assert tc3 == "-00:00:00;10"

    tc3 = tc2 - tc1
    assert "24" == tc3.framerate
    assert 10 == tc3._frame_number
    assert tc3 == "00:00:00;10"


@pytest.mark.parametrize(
    "args,kwargs,func,tc2", [
        [["24", "-00:00:01:00"], {}, lambda x, y: x + y, "not suitable"],
        [["24", "-00:00:01:00"], {}, lambda x, y: x - y, "not suitable"],
        [["24", "-00:00:01:00"], {}, lambda x, y: x * y, "not suitable"],
        [["24", "-00:00:01:00"], {}, lambda x, y: x / y, "not suitable"],
        [["24", "-00:00:01:00"], {}, lambda x, y: x + y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x - y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x * y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x / y, 32.4],
    ]
)
def test_arthmetic_with_non_suitable_class_instance(args, kwargs, func, tc2):
    """STimecodeError is raised if the other class is not suitable for the operation."""
    tc1 = STimecode(*args, **kwargs)
    with pytest.raises(TimecodeError) as cm:
        _ = func(tc1, tc2)
    assert "Type {} not supported for arithmetic.".format(tc2.__class__.__name__) == str(cm.value)

    with pytest.raises(TimecodeError) as cm:
        _ = func(tc2, tc1)
    assert "Type {} not supported for arithmetic.".format(tc2.__class__.__name__) == str(cm.value)
    

def test_mul_with_two_different_frame_rates():
    """Multiplied TCs with different framerate, result framerate is same with left side."""
    tc1 = STimecode("29.97", frame_number=-100)
    tc2 = STimecode("24", frame_number=10)
    tc3 = tc1 * tc2
    assert "29.97" == tc3.framerate
    assert -1000 == tc3._frame_number
    assert tc3 == "-00:00:33;10"

    tc2 = Timecode("24", frames=11)
    tc3 = tc1 * tc2
    assert "29.97" == tc3.framerate
    assert -1000 == tc3._frame_number
    assert tc3 == "-00:00:33;10"

    tc2 = Timecode("24", frames=11)
    tc3 = tc2 * tc1
    assert "24" == tc3.framerate
    assert -1000 == tc3._frame_number
    assert tc3 == "-00:00:41;16"


def test_div_method_working_properly_1():
    """__div__ method is working properly."""
    tc1 = STimecode("24", frame_number=-100)
    tc2 = STimecode("24", frame_number=-10)
    tc3 = tc1 / tc2
    assert tc3.frame_number == 10
    assert tc3 == "00:00:00:10"

    tc2 = Timecode("24", frames=11)
    tc3 = tc1 / tc2
    assert tc3.frame_number == -10
    assert tc3 == "-00:00:00:10"

    tc3 = tc2 / tc1
    assert tc3.frame_number == 0
    assert tc3 == "00:00:00:00"

    
def test_div_method_working_properly_2():
    """__div__ method is working properly."""
    tc1 = STimecode("24", "-00:00:10:00")
    tc2 = tc1 / 10
    assert tc2 == "-00:00:01:00"


def test_div_with_two_different_frame_rates():
    """Divideded TCs with different framerate, result framerate is same with left side."""
    tc1 = STimecode("29.97", frame_number=-100)
    tc2 = STimecode("24", frame_number=10)
    tc3 = tc1 / tc2
    assert "29.97" == tc3.framerate
    assert -10 == tc3._frame_number
    assert tc3 == "-00:00:00;10"

    tc2 = Timecode("24", frames=11)
    tc3 = tc1 / tc2
    assert "29.97" == tc3.framerate
    assert -10 == tc3._frame_number
    assert tc3 == "-00:00:00;10"

    tc2 = Timecode("24", frames=1001)
    tc3 = tc2 / tc1
    assert "24" == tc3.framerate
    assert -10 == tc3._frame_number
    assert tc3 == "-00:00:00;10"


@pytest.mark.parametrize(
    "args,frames,frame_number", [
        [["24", "-00:00:00:00"], 1, 0], #!
        [["24", "-00:00:01:00"], 25, -24],
        [["29.97", "-00:01:00;00"], 1799, -1798],
        [["30", "-00:01:00:00"], 1801, -1800],
        [["50", "-00:01:00:00"], 3001, -3000],
        [["59.94", "-00:01:00;00"], 3597, -3596],
        [["60", "-00:01:00:00"], 3601, -3600],
    ]
)
def test_frame_number_attribute_value_is_correctly_calculated(args, frames, frame_number):
    """STimecode.frame_number attribute is correctly calculated."""
    tc1 = STimecode(*args)
    assert frames == tc1.frames
    assert frame_number == tc1.frame_number


def test_24_hour_limit_in_24fps():
    """timecode will loop back to 00:00:00:00 after 24 hours in 24 fps."""
    tc1 = STimecode("24", "-00:00:00:21")
    tc2 = STimecode("24", "-23:59:59:23")
    assert "-00:00:00:20" == (tc1 + tc2).__str__()
    assert "-02:00:00:00" == (tc2 + -159840001).__str__()


def test_24_hour_limit_in_2997fps():
    """timecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-00:00:00;21")
    assert tc1.drop_frame
    assert 22 == tc1.frames

    tc2 = STimecode("29.97", "-23:59:59;29")
    assert tc2.drop_frame
    assert -2589407 == tc2._frame_number

    assert "-00:00:00;21" == tc1.__repr__()
    assert "-23:59:59;29" == tc2.__repr__()

    assert "-00:00:00;20" == (tc1 + tc2).__str__()
    assert "-02:00:00;00" == (tc2 - 215785).__str__()
    assert "-02:00:00;00" == (tc2 - 215785 - 2589408).__str__()
    assert "-02:00:00;00" == (tc2 - 215785 - 2589408 - 2589408).__str__()


def test_24_hour_limit_1():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("59.94", "-23:59:59;29")
    assert -5178785 == tc1._frame_number


def test_24_hour_limit_2():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-23:59:59;29")
    assert -2589407 == tc1._frame_number


def test_24_hour_limit_3():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", frame_number=-2589407)
    assert "-23:59:59;29" == tc1.__str__()


def test_24_hour_limit_4():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-23:59:59;29")
    tc2 = tc1 - 1
    assert "00:00:00;00" == tc2.__str__()


def test_24_hour_limit_5():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-23:59:59;29")
    tc2 = tc1 - 21
    assert "-00:00:00;20" == tc2.__str__()


def test_24_hour_limit_6():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-00:00:00;21")
    tc2 = STimecode("29.97", "-23:59:59;29")
    tc3 = tc1 + tc2
    assert "-00:00:00;20" == tc3.__str__()


def test_24_hour_limit_7():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-04:20:13;21")
    assert -467943 == tc1._frame_number
    assert "-04:20:13;21" == tc1.__str__()


def test_24_hour_limit_8():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", frame_number=-467944)
    assert -467944 == tc1._frame_number
    assert "-04:20:13;22" == tc1.__str__()


def test_24_hour_limit_9():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", "-23:59:59;29")
    assert -2589407 == tc1._frame_number
    assert "-23:59:59;29" == tc1.__str__()


def test_24_hour_limit_10():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", frame_number=-2589408)
    assert -2589408 == tc1._frame_number
    assert "00:00:00;00" == tc1.__str__()


def test_24_hour_limit_11():
    """STimecode will loop back to 00:00:00:00 after 24 hours in 29.97 fps."""
    tc1 = STimecode("29.97", frame_number=-467944)
    tc2 = STimecode('29.97', '-23:59:59;29')
    tc3 = tc1 + tc2
    assert "-04:20:13;21" == tc3.__str__()


def test_framerate_can_be_changed():
    """STimecode is automatically updated if the framerate attribute is changed."""
    tc1 = STimecode("25", frame_number=-100)
    assert "-00:00:04:00" == tc1.__str__()
    assert -100 == tc1._frame_number

    tc1.framerate = "12"
    assert "-00:00:08:04" == tc1.__str__()
    assert -100 == tc1._frame_number


@pytest.mark.parametrize(
    "args,kwargs,frame_rate,int_framerate", [
        [["24000/1000", "-00:00:00:00"], {}, "24", 24],
        [["24000/1001", "-00:00:00;00"], {}, "23.98", 24],
        [["30000/1000", "-00:00:00:00"], {}, "30", 30],
        [["30000/1001", "-00:00:00;00"], {}, "29.97", 30],
        [["60000/1000", "-00:00:00:00"], {}, "60", 60],
        [["60000/1001", "-00:00:00;00"], {}, "59.94", 60],
        [[(60000, 1001), "-00:00:00;00"], {}, "59.94", 60],
    ]
)
def test_rational_framerate_conversion(args, kwargs, frame_rate, int_framerate):
    """Fractional framerate conversion."""
    tc = STimecode(*args, **kwargs)
    assert frame_rate == tc.framerate
    assert int_framerate == tc._int_framerate


def test_rational_frame_delimiter_1():
    tc = STimecode("24000/1000", frame_number=1)
    assert ";" not in tc.__repr__()


def test_rational_frame_delimiter_2():
    tc = STimecode("24000/1001", frame_number=1)
    assert ";" not in tc.__repr__()


def test_rational_frame_delimiter_3():
    tc = STimecode("30000/1001", frame_number=1)
    assert ";" in tc.__repr__()


def test_ms_vs_fraction_frame_number_1():
    tc1 = STimecode("ms", "-00:00:00.040")
    assert tc1.ms_frame
    assert not tc1.fraction_frame


def test_ms_vs_fraction_frame_number_2():
    tc2 = STimecode(24, "-00:00:00.042")
    assert tc2.fraction_frame
    assert not tc2.ms_frame


def test_ms_vs_fraction_frame_number_3():
    tc1 = STimecode("ms", "-00:00:00.040")
    tc2 = STimecode(24, "-00:00:00.042")
    assert tc1 != tc2


def test_ms_vs_fraction_frame_number_4():
    tc1 = STimecode("ms", "-00:00:00.040")
    tc2 = STimecode(24, "-00:00:00.042")
    assert tc1.frame_number == -40
    assert tc2.frame_number == -1


def test_toggle_fractional_frame_1():
    tc = STimecode(24, -421729315)
    assert tc.__repr__() == "-19:23:14:23"


def test_toggle_fractional_frame_2():
    tc = STimecode(24, -421729315)
    tc.set_fractional(True)
    assert tc.__repr__() == "-19:23:14.958"


def test_toggle_fractional_frame_3():
    tc = STimecode(24, -421729315)
    tc.set_fractional(False)
    assert tc.__repr__() == "-19:23:14:23"


def test_ge_overload():
    tc1 = STimecode(24, "00:00:00:00")
    tc2 = STimecode(24, "-00:00:00:00")
    tc3 = STimecode(24, "-00:00:00:01")
    tc4 = STimecode(24, "-00:00:01.100")
    tc5 = STimecode(24, "-00:00:01.200")

    assert tc1 == tc2
    assert tc1 <= tc2
    assert tc3 <= tc2
    assert (tc2 <= tc3) is False
    assert tc4 >= tc5


def test_gt_overload_a():
    tc1 = STimecode(24, "00:00:00:00")
    tc2 = STimecode(24, "-00:00:00:00")
    tc3 = STimecode(24, "-00:00:00:01")
    tc4 = STimecode(24, "-00:00:01.100")
    tc5 = STimecode(24, "-00:00:01.200")

    assert not (tc1 < tc2)
    assert not (tc2 < tc2)
    assert tc3 < tc2
    assert tc5 < tc4


def test_le_overload():
    tc1 = STimecode(24, "00:00:00:00")
    tc2 = STimecode(24, "-00:00:00:00")
    tc3 = STimecode(24, "-00:00:00:01")
    tc4 = STimecode(24, "-00:00:01.100")
    tc5 = STimecode(24, "-00:00:01.200")

    assert (tc1 == tc2)
    assert (tc1 >= tc2)
    assert (tc2 >= tc3)
    assert not (tc2 <= tc3)
    assert (tc5 <= tc4)
    assert tc5 < tc4


def test_gt_overload_b():
    tc1 = STimecode(24, "00:00:00:00")
    tc2 = STimecode(24, "-00:00:00:00")
    tc3 = STimecode(24, "-00:00:00:01")
    tc4 = STimecode(24, "-00:00:01.100")
    tc5 = STimecode(24, "-00:00:01.200")

    assert not (tc1 > tc2)
    assert not (tc2 > tc2)
    assert (tc2 > tc3)
    assert (tc4 > tc5)


@pytest.mark.parametrize(
    "args,kwargs,func,tc2", [
        [["24", "-00:00:01:00"], {}, lambda x, y: x == y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x <  y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x <= y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x >  y, 32.4],
        [["24", "-00:00:01:00"], {}, lambda x, y: x >= y, 32.4],
    ]
)
def test_comparison_with_non_suitable_class_instance(args, kwargs, func, tc2):
    """STimecodeError is raised if the other class is not suitable for the operation."""
    tc1 = STimecode(*args, **kwargs)
    with pytest.raises(TimecodeError) as cm:
        _ = func(tc1, tc2)

    assert "Type {} not supported for comparison.".format(tc2.__class__.__name__) == str(cm.value)

    with pytest.raises(TimecodeError) as cm:
        _ = func(tc2, tc1)

    assert "Type {} not supported for comparison.".format(tc2.__class__.__name__) == str(cm.value)
    

def test_parse_stimecode_with_int():
    """parse_stimecode method with int input."""
    result = STimecode.parse_timecode(-16663)
    assert result == (0, 0, 41, 17, -1)  # issue #16


def test_frame_number_argument_is_not_an_int():
    """TypeError is raised if the frame_number argument is not an integer."""
    with pytest.raises(TypeError) as cm:
        STimecode("30", frame_number=-0.1223)

    assert "STimecode.frame_number should be an integer, not a float" == str(cm.value)


def test_bug_report_30():
    """bug report 30

    The claim on the bug report was to get ``00:34:45:09`` from a STimecode with 23.976
    as the frame rate (supplied with Python 3's Fraction library) and 50000 as the total
    number of frame_number. The support for Fraction instances were missing, and it has been
    added. But the claim for the resultant STimecode was wrong, the resultant STimecode
    should have been ``00:34:43:07`` and that has been confirmed by DaVinci Resolve.
    """
    from fractions import Fraction

    framerate = Fraction(24000, 1001)  # 23.976023976023978
    frame_idx = -50000

    tc1 = STimecode(framerate, frame_number=frame_idx)
    assert "-00:34:43:08" == tc1.__repr__()

'''
def test_bug_report_31_part1():
    """bug report 31
    https://github.com/eoyilmaz/timecode/issues/31
    """
    timecode1 = "-01:00:10:00"
    timecode2 = "-01:00:10:00"
    a = STimecode("25", timecode1)
    b = STimecode("25", timecode2)

    with pytest.raises(ValueError) as cm:
        _ = a - b

    assert (
        str(cm.value)
        == "STimecode.frame_number should be a positive integer bigger than zero, not 0"
    )
'''

def test_bug_report_31_part2():
    """bug report 31
    https://github.com/eoyilmaz/timecode/issues/31
    """
    timecode1 = "-01:00:08:00"
    timecode2 = "-01:00:10:00"
    timecode3 = "-01:01:00:00"
    a = STimecode("25", timecode1)
    b = STimecode("25", timecode2)
    offset = a - b
    _ = STimecode("25", timecode3) + offset


def test_bug_report_32():
    """bug report 32
    https://github.com/eoyilmaz/timecode/issues/32
    """
    framerate = "30000/1001"
    seconds = -500
    tc1 = STimecode(framerate, start_seconds=seconds)
    assert seconds == tc1.float


def test_set_timecode_method():
    """set_timecode method is working properly."""
    tc1 = STimecode("24")
    assert tc1.frame_number == 0
    assert tc1 == "00:00:00:00"

    tc2 = STimecode("29.97", frame_number=-1000)
    assert tc2.frame_number == -1000

    tc1.set_timecode(tc2.__repr__())  # this is interpreted as 24
    assert tc1.frame_number == -802

    tc1.set_timecode(tc2)  # this should be interpreted as 29.97 and 1000 frame_number
    assert tc1.frame_number == -1000


def test_iter_method():
    """__iter__ method"""
    tc = STimecode("24", "-01:00:00:00")
    for a in tc:
        assert a == tc


def test_back_method_returns_a_timecode_instance():
    """back method returns a STimecode instance."""
    tc = STimecode("24", "-01:00:00:00")
    assert isinstance(tc.back(), STimecode)


def test_back_method_returns_the_instance_itself():
    """back method returns the STimecode instance itself."""
    tc = STimecode("24", "-01:00:00:00")
    assert tc.back() is tc


def test_back_method_reduces_frame_number_by_one():
    """back method reduces the ``STimecode.frame_number`` by one."""
    tc = STimecode("24", "-01:00:00:00")
    frame_number = tc.frame_number
    assert tc.back().frame_number == (frame_number - 1)


def test_mult_frame_number_method_is_working_properly():
    """mult_frame_number method is working properly."""
    tc = STimecode("24", frame_number=-1)
    tc.mult_frame_number(-10)
    assert tc.frame_number == 10
    assert tc.__repr__() == "00:00:00:10"


def test_div_frames_method_is_working_properly():
    """div_frame_number method is working properly."""
    tc = STimecode("24", "-00:00:00:10")
    assert tc.frame_number == -10
    tc.div_frame_number(10)
    assert tc.frame_number == -1
    assert tc.__repr__() == "-00:00:00:01"


def test_eq_method_with_integers():
    """Comparing the STimecode with integers are working properly."""
    tc = STimecode("24", "00:00:10:00")
    assert tc == 240


def test_ge_method_with_strings():
    """__ge__ method with strings."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc <= "-00:00:09:00"
    assert tc <= "-00:00:10:00"


def test_ge_method_with_integers():
    """__ge__ method with integers."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc <= -230
    assert tc <= -240


def test_gt_method_with_strings():
    """__gt__ method with strings."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc < "-00:00:09:00"


def test_gt_method_with_integers():
    """__gt__ method with integers."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc < 230


def test_le_method_with_strings():
    """__le__ method with strings."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc >= "-00:00:11:00"
    assert tc >= "-00:00:10:00"


def test_le_method_with_integers():
    """__le__ method with integers."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc >= -250
    assert tc >= -241


def test_lt_method_with_strings():
    """__lt__ method with strings."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc > "-00:00:11:00"


def test_lt_method_with_integers():
    """__lt__ method with integers."""
    tc = STimecode("24", "-00:00:10:00")
    assert tc > -250


def test_fraction_lib_from_python3_raises_import_error_for_python2():
    """ImportError is raised and the error is handled gracefully under Python 2 if
    importing the Fraction library which is introduced in Python 3.

    This is purely done for increasing the code coverage to 100% under Python 3.
    """
    try:
        import mock
    except ImportError:
        from unittest import mock
    import sys

    with mock.patch.dict(sys.modules, {"fractions": None}):
        # the coverage should be now 100%
        _ = STimecode("24")


def test_rollover_for_23_98():
    """bug report #33."""
    tc = STimecode("23.98", "-23:58:47:00")
    assert -2071848 == tc.frame_number
    tc.add_frames(-24)
    assert -2071872 == tc.frame_number
    assert "-23:58:48:00" == tc.__repr__()


@pytest.mark.parametrize(
    "args,kwargs,str_repr", [
        [["29.97"], {"frame_number": -2589408}, "00:00:00;00"],
        [["29.97"], {"frame_number": -2589409}, "-00:00:00;01"],
        [["29.97"], {"frame_number": -2589409, "force_non_drop_frame": True}, "-23:58:33:19"],
        [["29.97"], {"frame_number": -2592001, "force_non_drop_frame": True}, "-00:00:00:01"],
        [["59.94"], {"frame_number": -5178816}, "00:00:00;00"],
        [["59.94"], {"frame_number": -5178817}, "-00:00:00;01"],
        [["59.94"], {"frame_number": -5184000, "force_non_drop_frame": True}, "00:00:00:00"],
        [["59.94"], {"frame_number": -5184001, "force_non_drop_frame": True}, "-00:00:00:01"],
    ]
)
def test_rollover(args, kwargs, str_repr):
    tc = STimecode(*args, **kwargs)
    assert str_repr == tc.__str__()
